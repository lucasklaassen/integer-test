service: aws-nodejs

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  versionFunctions: false
  stage: ${opt:stage, self:custom.defaultStage}
  profile: personal
  environment: ${file(environment.yml)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    IntegerUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.${opt:stage, self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    ScheduledEventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.scheduledEventsTableName.${opt:stage, self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    UserPicksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userPicksTableName.${opt:stage, self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    LeaderboardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.leaderboardTableName.${opt:stage, self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    HallOfFameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.hallOfFameTableName.${opt:stage, self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
functions:
  auth0Authorizer:
    handler: src/api/handler.auth0Authorizer
  scheduleEventsList:
    handler: src/api/scheduled-events/scheduled-events.getAll
    events:
      - http:
          path: scheduled-events
          method: get
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  fetchNewApiData:
    handler: src/api/fetcher/fetcher.fetchNewApiData
    timeout: 300
    events:
      - schedule: rate(10 minutes)
      - http:
          path: fetcher
          method: get
          cors: true
  winChecker:
    handler: src/api/win-checker/win-checker.winChecker
    timeout: 300
    events:
      - schedule: rate(5 minutes)
      - http:
          path: win-checker
          method: get
          cors: true
  fetchUserPicks:
    handler: src/api/user-picks/user-picks.fetch
    events:
      - http:
          path: user-picks
          method: get
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  savePicks:
    handler: src/api/user-picks/user-picks.savePicks
    events:
      - http:
          path: user-picks
          method: post
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  fetchLeaderboard:
    handler: src/api/leaderboard/leaderboard.fetch
    events:
      - http:
          path: leaderboard
          method: get
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  saveLeaderboard:
    handler: src/api/leaderboard/leaderboard.saveLeaderboard
    events:
      - http:
          path: leaderboard
          method: post
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  leaderboardList:
    handler: src/api/leaderboard/leaderboard.getAll
    events:
      - http:
          path: leaderboards
          method: get
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  hallOfFameList:
    handler: src/api/hall-of-fame/hall-of-fame.getAll
    events:
      - http:
          path: hall-of-fame
          method: get
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  nextInteger:
    handler: src/api/integers/integers.next
    events:
      - http:
          path: integers/next
          method: get
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  usersList:
    handler: src/api/integers/integers.current
    events:
      - http:
          path: integers/current
          method: get
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  usersUpdate:
    handler: src/api/integers/integers.update
    events:
      - http:
          path: integers/current
          method: put
          cors: true
          authorizer:
            name: auth0Authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

plugins:
  - serverless-plugin-typescript
  - serverless-secrets-plugin
  - serverless-dynamodb-local
  - serverless-offline

package:
  include:
    - src/**/!(*.spec).js

custom:
  tableName:
    local: IntegerUser
    test: IntegerUser
    production: IntegerUserProd
  scheduledEventsTableName:
    local: ScheduledEvents
    test: ScheduledEvents
    production: ScheduledEventsProd
  userPicksTableName:
    local: UserPicks
    test: UserPicks
    production: UserPicksProd
  leaderboardTableName:
    local: Leaderboard
    test: Leaderboard
    production: LeaderboardProd
  hallOfFameTableName:
    local: HallOfFame
    test: HallOfFame
    production: HallOfFameProd
  defaultStage: local
  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}
  dynamodb:
    stages:
      - local
    start:
      inMemory: true
      migrate: true
      convertEmptyValues: true
